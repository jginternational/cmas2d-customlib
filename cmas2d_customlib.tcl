#################################################
#      GiD-Tcl procedures invoked by GiD        #
#################################################
proc InitGIDProject { dir } {
    Cmas2d::SetDir $dir ;#store to use it later
    Cmas2d::ModifyMenus
    gid_groups_conds::open_conditions menu
    Cmas2d::CreateWindow  ;#create a window as Tcl example (random surface creation)       
}

proc ChangedLanguage { language } {
    Cmas2d::ModifyMenus ;#to customize again the menu re-created for the new language
}
 
proc AfterWriteCalcFileGIDProject { filename errorflag } {   
    if { ![info exists gid_groups_conds::doc] } {
        WarnWin [= "Error: data not OK"]
        return
    }    
    set err [catch { Cmas2d::WriteCalculationFile $filename } ret]
    if { $err } {       
        WarnWin [= "Error when preparing data for analysis (%s)" $::errorInfo]
        set ret -cancel-
    }
    return $ret
}

#################################################
#      namespace implementing procedures        #
#################################################
namespace eval Cmas2d { 
    variable problemtype_dir 
}

proc Cmas2d::SetDir { dir } {  
    variable problemtype_dir
    set problemtype_dir $dir
}

proc Cmas2d::GetDir { } {  
    variable problemtype_dir
    return $problemtype_dir
}

proc Cmas2d::ModifyMenus { } {   
    if { [GidUtils::IsTkDisabled] } {  
        return
    }          
    foreach menu_name {Conditions Interval "Interval Data" "Local axes"} {
        GidChangeDataLabel $menu_name ""
    }       
    GidAddUserDataOptions --- 1    
    GidAddUserDataOptions [= "Data tree"] [list gid_groups_conds::open_conditions menu] 2
    set x_path {/*/container[@n="Properties"]/container[@n="materials"]}
    GidAddUserDataOptions [= "Import/export materials"] [list gid_groups_conds::import_export_materials .gid $x_path] 3
    GiDMenu::UpdateMenus
}

######################################################################
# example procedures asking GiD_Info and doing things with GiD_Process
proc Cmas2d::CreateWindow { } {  
    if { [GidUtils::AreWindowsDisabled] } {
        return
    }  
    if { [GiD_Info geometry NumSurfaces] > 0 } {
        #only offer to create a new random surface if there is no more surfaces in the current model
        return
    }
    set w .gid.win_example
    InitWindow $w [= "CMAS2D.TCL - Example tcl file"] ExampleCMAS "" "" 1
    if { ![winfo exists $w] } return ;# windows disabled || usemorewindows == 0
    ttk::frame $w.top
    ttk::label $w.top.title_text -text [= "TCL window example for CMAS2D problem type"]   
    ttk::frame $w.information -relief ridge   
    ttk::label $w.information.help   -text [= " This problemtype allows the user to compute the center of mass of a given 2D geometry. \
      \n The geometry can be generated by the user but he can also take a suggested random surface"] 
    ttk::frame $w.bottom
    ttk::button $w.bottom.start -text [= "Continue"] -command [list destroy $w]
    ttk::button $w.bottom.random -text [= "Random surface"] -command [list Cmas2d::CreateRandomSurfaceAsk $w]
    grid $w.top.title_text -sticky ew
    grid $w.top -sticky new   
    grid $w.information.help -sticky w -padx 6 -pady 6
    grid $w.information -sticky nsew    
    grid $w.bottom.start $w.bottom.random -padx 6
    grid $w.bottom -sticky sew -padx 6 -pady 6
    if { $::tcl_version >= 8.5 } { grid anchor $w.bottom center }
    grid rowconfigure $w 1 -weight 1
    grid columnconfigure $w 0 -weight 1    
}

proc Cmas2d::CreateRandomSurfaceAsk {w} {
    set ret [tk_dialogRAM $w.dialog [= "Warning!!"] [= "Warning: this will create a nurbs surface in your current project"] "" 1 [= "Ok"] [= "Cancel"]]    
    if {$ret ==0} {
        destroy $w
        Cmas2d::CreateRandomSurface        
        GiD_Process 'Zoom Frame escape escape escape
    }
}

proc Cmas2d::CreateRandomSurface {} {
    set a_x [expr rand()*10]
    set a_y [expr rand()*10]    
    set b_x [expr $a_x+rand()*10]
    set b_y [expr $a_y+rand()*10]    
    set c_x [expr $b_x+rand()*10]
    set c_y [expr $b_y-rand()*10]    
    if {$a_y < $c_y} {
        set d_y [expr $a_y-rand()*10]
        set d_x [expr $a_x+rand()*10]
    } else {
        set d_y [expr $c_y-rand()*10] 
        set d_x [expr $c_x-rand()*10]
    }
    GiD_Process Mescape Geometry Create Line $a_x,$a_y,0 $b_x,$b_y,0 $c_x,$c_y,0 $d_x,$d_y,0 close escape
    GiD_Process Mescape Geometry Create NurbsSurface 1:4 escape
}

######################################################################
#  auxiliary procs invoked from the tree (see .spd xml description)
proc Cmas2d::GetMaterialsList { domNode args } {    
    set x_path {//container[@n="materials"]}
    set dom_materials [$domNode selectNodes $x_path]
    if { $dom_materials == "" } {
        error [= "xpath '%s' not found in the spd file" $x_path]
    }
    set image material
    set result [list]
    foreach dom_material [$dom_materials childNodes] {
        set name [$dom_material @name] 
        lappend result [list 0 $name $name $image 1]
    }
    return [join $result ,]
}

proc Cmas2d::EditDatabaseList { domNode dict boundary_conds args } {
    set has_container ""
    set database materials    
    set title [= "User defined"]      
    set list_name [$domNode @n]    
    set x_path {//container[@n="materials"]}
    set dom_materials [$domNode selectNodes $x_path]
    if { $dom_materials == "" } {
        error [= "xpath '%s' not found in the spd file" $x_path]
    }
    set primary_level material
    if { [dict exists $dict $list_name] } {
        set xps $x_path
        append xps [format_xpath {/blockdata[@n=%s and @name=%s]} $primary_level [dict get $dict $list_name]]
    } else { 
        set xps "" 
    }
    set domNodes [gid_groups_conds::edit_tree_parts_window -accepted_n $primary_level -select_only_one 1 $boundary_conds $title $x_path $xps]          
    set dict ""
    if { [llength $domNodes] } {
        set domNode [lindex $domNodes 0]
        if { [$domNode @n] == $primary_level } {      
            dict set dict $list_name [$domNode @name]
        }
    }
    return [list $dict ""]
}

###################################################################################
#      print data in the .dat calculation file (instead of a classic .bas template)
proc Cmas2d::WriteCalculationFile { filename } {
    customlib::InitWriteFile $filename
    set elements_conditions [list "Shells"]
    # This instruction is mandatory for using materials
    customlib::InitMaterials $elements_conditions
    customlib::WriteString "=================================================================="
    customlib::WriteString "                        General Data File"    
    customlib::WriteString "=================================================================="
    customlib::WriteString ""
    customlib::WriteString "%%%%%%%%%%%%%%%%%% Problem Size  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"
    customlib::WriteString "Number of Elements & Nodes:"
    customlib::WriteString "[GiD_Info Mesh NumElements] [GiD_Info Mesh NumNodes]"    
    customlib::WriteString ""
    customlib::WriteString "%%%%%%%%%%%%%%%%%%% Mesh Database  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"    
    #################### COORDINATES ############################ 
    customlib::WriteString ""
    customlib::WriteString "Coordinates:"
    customlib::WriteString "  Node        X                Y"
    # Write all nodes of the model, and it's coordinates
    # Check documentation to write nodes from an specific condition
    
    # 2D case
    customlib::WriteCoordinates "%5d %14.5e %14.5e%.0s\n"
    # Example for 3D case
    #customlib::WriteCoordinates "%5d %14.5e %14.5e %14.5e\n"
    #################### CONNECTIVITIES ############################    
    customlib::WriteString ""
    customlib::WriteString "................................................................."
    customlib::WriteString ""
    customlib::WriteString "Connectivities:"
    customlib::WriteString "    Element    Node(1)   Node(2)   Node(3)     Material"
    set element_formats [list {"%10d" "element" "id"} {"%10d" "element" "connectivities"} {"%10d" "material" "MID"}]
    customlib::WriteConnectivities $elements_conditions $element_formats  
    #################### MATERIALS ############################
    set num_materials [customlib::GetNumberOfMaterials used]
    customlib::WriteString ""
    customlib::WriteString "................................................................."
    customlib::WriteString ""
    customlib::WriteString "Begin Materials"
    customlib::WriteString "Nº Materials= $num_materials"
    customlib::WriteString "Mat.          Density"
    customlib::WriteString "................................................................."
    customlib::WriteMaterials [list {"%4d" "material" "MID"} {"%13.5e" "material" "Density"}] used
    customlib::WriteString "................................................................."
    #################### CONCENTRATE WEIGHTS ############################
    set condition_list [list "Point_Weight"]
    set condition_formats [list {"%1d" "node" "id"} {"%13.5e" "property" "Weight"}]
    set number_of_conditions [customlib::GetNumberOfNodes $condition_list]
    customlib::WriteString "Point Conditions"
    customlib::WriteString "Concentrate Weights"
    customlib::WriteString $number_of_conditions
    customlib::WriteString "................................................................."
    customlib::WriteString ""
    customlib::WriteString "Potencials Prescrits:"
    customlib::WriteString "   Node  Tipus"
    customlib::WriteString "   Valor/Etiqueta"
    customlib::WriteNodes $condition_list $condition_formats
    customlib::WriteString ""
    customlib::WriteString "................................................................."
    customlib::WriteString ""
    customlib::EndWriteFile ;#finish writting
}
